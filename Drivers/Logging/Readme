To use eventlog.py you also need to download logging.conf


#Importing#


Use the command:

  from DRIVERS.Logging import eventlog as log


#Calling the logger#


To initiate logging start it with the function:

  log.start_logging()
  
  start_logging() has optional keyword arguments that can be used to to specify the target database, logger and handler levels, and custom format string. If no database is specified the logs will print to sys.stdout. The level of the astroComb logger (logger_level) can be promoted from DEBUG to INFO or another higher level to reduce the number of statements in the log.


To log a function call use the function decorator:

  @log.log_this()
  
 log_this has four optional arguments. The first two are integers that change the level of the start and end log for the called function. The default is 10 which is the DEBUG level (20 =INFO, 30 = WARNING, 40 =ERROR, 50 = CRITICAL). The second two are strings that can be added to the logs for the start and end call to the logged function.
 
 
To log an error use the function:

  @log.log_error(mod_name, func_name, err)
  
 Where the module and function names are either hard-coded or read from the function object (see visa_objects.py for examples. The error is the code generated by the system and should be pulled from the except statement that the error logger follows. There are two optional arguments, a log string to be added to the log and a log level whose default is error.
